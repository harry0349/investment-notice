name: Investment Notice

on:
  schedule:
    # ÊØè‰∏™Â∑•‰ΩúÊó•Êôö‰∏ä8ÁÇπ (UTCÊó∂Èó¥)
    - cron: "0 20 * * 1-5"
    # ÊØèÂë®‰∫îÊôö‰∏ä8ÁÇπ (UTCÊó∂Èó¥ÔºåÈ¢ùÂ§ñÊâßË°åÂë®ÊÄªÁªì)
    - cron: "0 20 * * 5"
    # ÊØèÊúàÊúÄÂêé‰∏âÂ§©Êôö‰∏ä8ÁÇπ (UTCÊó∂Èó¥ÔºåË¶ÜÁõñÊúàÊú´Â∑•‰ΩúÊó•)
    - cron: "0 20 28-31 * *"
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build project
        run: cargo build --release

      - name: Format code
        run: cargo fmt --check

      - name: Run Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

      - name: Determine analysis mode
        id: mode
        run: |
          # Ëé∑ÂèñÂΩìÂâçÊó•Êúü‰ø°ÊÅØ
          DAY_OF_MONTH=$(date +%d)
          DAY_OF_WEEK=$(date +%u)  # 1=Monday, 7=Sunday

          echo "Day of month: $DAY_OF_MONTH"
          echo "Day of week: $DAY_OF_WEEK"

          # Âà§Êñ≠ËøêË°åÊ®°Âºè
          if [ "$DAY_OF_WEEK" = "5" ]; then
            # Âë®‰∫îÔºöËøêË°åÊØèÂë®ÂàÜÊûê
            echo "mode=weekly" >> $GITHUB_OUTPUT
            echo "Running weekly analysis"
          elif [ "$DAY_OF_MONTH" -ge 28 ] && [ "$DAY_OF_WEEK" -le 5 ]; then
            # ÊúàÊú´Â∑•‰ΩúÊó•ÔºöËøêË°åÊØèÊúàÂàÜÊûê
            echo "mode=monthly" >> $GITHUB_OUTPUT
            echo "Running monthly analysis"
          else
            # ÊôÆÈÄöÂ∑•‰ΩúÊó•ÔºöËøêË°åÊØèÊó•ÂàÜÊûê
            echo "mode=daily" >> $GITHUB_OUTPUT
            echo "Running daily analysis"
          fi

      - name: Run Investment Analysis
        env:
          TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
          ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER || 'smtp-mail.outlook.com' }}
          SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAILS: ${{ secrets.TO_EMAILS }}
          RUST_LOG: info
        run: |
          echo "Running analysis in ${{ steps.mode.outputs.mode }} mode"
          cargo run --release -- --mode ${{ steps.mode.outputs.mode }} --send-email

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: analyze
    if: failure()

    steps:
      - name: Send failure notification
        uses: actions/github-script@v7
        with:
          script: |
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

            await octokit.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üö® ÊäïËµÑÂàÜÊûê‰ªªÂä°ÊâßË°åÂ§±Ë¥•ÔºÅËØ∑Ê£ÄÊü•Êó•Âøó„ÄÇ`
            });
